version: '3.8'

services:
  # ICO MCP Server in stdio mode (default)
  ico-mcp-stdio:
    build: .
    container_name: ico-mcp-stdio
    environment:
      - NODE_ENV=production
      - MCP_MODE=stdio
      - DB_PATH=/app/data/ico.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      # Mount data directory for database persistence
      - ./data:/app/data
      # Mount logs directory
      - ./logs:/app/logs
      # Mount CSV file for setup
      - ./register-of-data-controllers.csv:/app/register-of-data-controllers.csv
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - ico-mcp-network

  # ICO MCP Server in HTTP mode
  ico-mcp-http:
    build: .
    container_name: ico-mcp-http
    environment:
      - NODE_ENV=production
      - MCP_MODE=http
      - PORT=${MCP_HTTP_PORT:-3001}
      - DB_PATH=/app/data/ico.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "${MCP_HTTP_PORT:-3001}:${MCP_HTTP_PORT:-3001}"
    volumes:
      # Mount data directory for database persistence
      - ./data:/app/data
      # Mount logs directory
      - ./logs:/app/logs
      # Mount CSV file for setup
      - ./register-of-data-controllers.csv:/app/register-of-data-controllers.csv
    restart: unless-stopped
    networks:
      - ico-mcp-network
    profiles:
      - http

  # ICO REST API Server
  ico-api:
    build: .
    container_name: ico-api
    environment:
      - NODE_ENV=production
      - MCP_MODE=api
      - PORT=${API_PORT:-3000}
      - DB_PATH=/app/data/ico.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "${API_PORT:-3000}:${API_PORT:-3000}"
    volumes:
      # Mount data directory for database persistence
      - ./data:/app/data
      # Mount logs directory
      - ./logs:/app/logs
      # Mount CSV file for setup
      - ./register-of-data-controllers.csv:/app/register-of-data-controllers.csv
    restart: unless-stopped
    networks:
      - ico-mcp-network
    profiles:
      - api

  # ICO HTTP Bridge (converts stdio to HTTP)
  ico-bridge:
    build: .
    container_name: ico-bridge
    environment:
      - NODE_ENV=production
      - MCP_MODE=bridge
      - MCP_HTTP_SERVER_URL=http://ico-mcp-http:${MCP_HTTP_PORT:-3001}
      - MCP_RECONNECT_DELAY=${MCP_RECONNECT_DELAY:-2000}
      - MCP_MAX_RETRY_ATTEMPTS=${MCP_MAX_RETRY_ATTEMPTS:-3}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      # Mount logs directory
      - ./logs:/app/logs
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - ico-mcp-network
    profiles:
      - bridge
    depends_on:
      - ico-mcp-http

  # Database setup utility
  ico-setup:
    build: .
    container_name: ico-setup
    environment:
      - NODE_ENV=production
      - DB_PATH=/app/data/ico.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      # Mount data directory for database persistence
      - ./data:/app/data
      # Mount logs directory
      - ./logs:/app/logs
      # Mount CSV file for setup
      - ./register-of-data-controllers.csv:/app/register-of-data-controllers.csv
    networks:
      - ico-mcp-network
    profiles:
      - setup
    command: ["node", "dist/scripts/setup-db.js"]

networks:
  ico-mcp-network:
    driver: bridge